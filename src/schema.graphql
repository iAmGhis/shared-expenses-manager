# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
  user: User!
}

type Board {
  author: User

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  published: Boolean!
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type BoardConnection {
  edges: [BoardEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type BoardEdge {
  cursor: String!
  node: Board!
}

"""Properties by which boards connections can be ordered."""
enum BoardOrderField {
  createdAt
  id
  published
  title
  updatedAt
}

input BoardsOrder {
  direction: OrderDirection!
  field: BoardOrderField!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input CreateBoardInput {
  title: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  changePassword(data: ChangePasswordInput!): User!
  createBoard(data: CreateBoardInput!): Board!
  login(data: LoginInput!): Auth!
  refreshToken(token: JWT!): Token!
  signup(data: SignupInput!): Auth!
  updateUser(data: UpdateUserInput!): User!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  asc
  desc
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  board(boardId: String!): Board!
  hello(name: String!): String!
  helloWorld: String!
  me: User!
  publishedBoards(after: String, before: String, first: Int, last: Int, orderBy: BoardsOrder, query: String, skip: Int): BoardConnection!
  userBoards(userId: String!): [Board!]!
}

"""User role"""
enum Role {
  ADMIN
  USER
}

input SignupInput {
  email: String!
  firstname: String
  lastname: String
  password: String!
}

type Subscription {
  boardCreated: Board!
}

type Token {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
}

input UpdateUserInput {
  firstname: String
  lastname: String
}

type User {
  boards: [Board!]

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  email: String!
  firstname: String
  id: ID!
  lastname: String
  role: Role!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}